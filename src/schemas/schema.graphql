extend type Product {
  countryOfOrigin: String
  website: String
  parentCompany: String
  establishedYear: String
  update: String
  name: String
  id: String
}
extend type ProductVariant {
  countryOfOrigin: String
  website: String
  parentCompany: String
  establishedYear: String
  update: String
  name: String
  id: String
}

extend type CatalogProduct {
  countryOfOrigin: String
  website: String
  parentCompany: String
  establishedYear: String
  update: String
  name: String
  id: String
}

extend input ProductVariantInput {
  countryOfOrigin: String
  website: String
  parentCompany: String
  establishedYear: String
  update: String
  name: String
  id: String
}

extend input ProductInput {
  countryOfOrigin: String
  website: String
  parentCompany: String
  establishedYear: String
  update: String
  name: String
  id: String
}

type VehicleModel implements Node {
  _id: ID!
  title: String
  productId: String
  update: String
  name: String
  id: String
  prototype: String
  modelYear: String
  generationID: String
  isDeleted: Boolean
  isVisible: Boolean
}
type vehicleModelConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [VehicleModelEdge]
  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [VehicleModel]
  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!
  "The total number of nodes that match your query"
  totalCount: Int!
}
type vehicleVariantConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [VehicleVariantEdge]
  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [VehicleVariant]
  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!
  "The total number of nodes that match your query"
  totalCount: Int!
}
type VehicleVariantEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!
  "The Transaction"
  node: VehicleVariant
}
type VehicleModelEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!
  "The Transaction"
  node: VehicleModel
}
type VehicleModelPayload {
  status: Boolean
  message: String
  VehicleModelData: JSON
}
input vehicleModelInput {
  title: String
  productId: String
  update: String
  name: String
  id: String
  prototype: String
  modelYear: String
  generationID: String
  isDeleted: Boolean
  isVisible: Boolean
}

type VehicleVariant implements Node {
  _id: ID!
  vehicleModelId: ID
  productId: ID
  id: String
  update: String
  brand: String
  model: String
  generation: String
  engineSpec: engineSpecValues
  torqueValue: torqueValues
  fuelSystem: String
  turbine: String
  valveTrain: String
  positionCylinders: String
  cylinders: String
  bore: String
  stroke: String
  compressionRatio: String
  valvesPerCylinder: String
  engineOilSpecs: engineOilSpecsValues
  coolant: String
  drive: String
  gearBoxType: String
  Suspension: suspensionValues
  brakes: brakesValues
  tireSize: tireSizeValues
  rimsSize: rimsSizeValues
  powerSpec: powerSpecValues
  isDeleted: Boolean
  isVisible: Boolean
  updatedAt: DateTime
  createdAt: DateTime
}
input VehicleVariantInput {
  vehicleModelId: ID!
  productId: ID!
  id: String
  update: String
  brand: String
  model: String
  generation: String
  engineSpec: engineSpecInput
  torqueValue: torqueValueInput
  powerSpec: powerSpecInput
  fuelSystem: String
  turbine: String
  valveTrain: String
  positionCylinders: String
  cylinders: String
  bore: String
  stroke: String
  compressionRatio: String
  valvesPerCylinder: String
  engineOilSpecs: engineOilSpecsInput
  coolant: String
  drive: String
  gearBoxType: String
  Suspension: suspensionInput
  brakes: brakesInput
  tireSize: tireSizeInput
  rimsSize: rimsSizeInput
  isDeleted: Boolean
  isVisible: Boolean
  updatedAt: DateTime
  createdAt: DateTime
}
input powerSpecInput {
  powerTrain: String
  power: String
  powerHp: String
  powerRpm: String
  powerRpmLow: String
}
type powerSpecValues {
  powerTrain: String
  power: String
  powerHp: String
  powerRpm: String
  powerRpmLow: String
}
input engineSpecInput {
  engineCode: String
  enginePosition: String
  engineDisplacement: String
}
type engineSpecValues {
  engineCode: String
  enginePosition: String
  engineDisplacement: String
}
input torqueValueInput {
  torque: String
  torqueNm: String
  torqueRpm: String
  torqueRpmLow: String
  torqueRpmHigh: String
}
type torqueValues {
  torque: String
  torqueNm: String
  torqueRpm: String
  torqueRpmLow: String
  torqueRpmHigh: String
}
input suspensionInput {
  frontSuspension: String
  rearSuspension: String
}
type suspensionValues {
  frontSuspension: String
  rearSuspension: String
}
input brakesInput {
  frontBrakes: String
  rearBrakes: String
}
type brakesValues {
  frontBrakes: String
  rearBrakes: String
}
input engineOilSpecsInput {
  engineOilCapacity: String
  oil: [String]
}
input tireSizeInput {
  all: String
  tire: [TireInput]
}
input TireInput {
  size: String
  width: String
  Height: String
  Dimension: String
}
input rimsSizeInput {
  all: String!
  rim: [String!]!
}
type rimsSizeValues {
  all: String!
  rim: [String!]!
}
type engineOilSpecsValues {
  engineOilCapacity: String
  oil: [String]
}
type tireSizeValues {
  all: String
  tire: [Tire]
}
type Tire {
  size: String
  width: String
  Height: String
  Dimension: String
}
type RimsSizeValues {
  all: String!
  rim: [String!]!
}
input updateVehicleModelInput {
  "Product input"
  product: updateVehicleInput!

  "ID of product to update"
  productId: ID!

  "ID of shop that owns the product to update"
  shopId: ID!
}
input updateVehicleInput {
  title: String
  productId: String
  update: String
  name: String
  id: String
  prototype: String
  modelYear: String
  generationID: String
  isDeleted: Boolean
  isVisible: Boolean
}
input updateVehicleVariantInput {
  "Product input"
  product: VehicleVariantInput!

  "ID of product to update"
  productId: ID!

  "ID of shop that owns the product to update"
  shopId: ID!
}
type VehicleVariantPayload {
  status: Boolean
  message: String
  VehicleVariantData: JSON
}

extend type Mutation {
  createVehicleModel(input: vehicleModelInput, shopId: String): VehicleModel
  createVehicleVariant(input: VehicleVariantInput): VehicleVariant
  updateVehicleModel(input: updateVehicleModelInput): VehicleModelPayload
  updateVehicleVariant(input: updateVehicleVariantInput): VehicleVariantPayload
  deleteVehicleVariant(id: ID!): VehicleVariantPayload
  deleteVehicleModel(id: ID!): VehicleModelPayload
}
extend type Query {
  getAllVehicleModel(
    searchQuery: String
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor
    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor
    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt
    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt
    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int
    "Return results sorted in this order"
    sortOrder: SortOrder = asc
    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: AccountSortByField = timeSent
  ): vehicleModelConnection!
  getVehicleModelById(id: ID!): VehicleModel
  getAllVehicleVariant( 
    searchQuery: String
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor
    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor
    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt
    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt
    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int
    "Return results sorted in this order"
    sortOrder: SortOrder = asc
    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: AccountSortByField = timeSent
  ): vehicleVariantConnection!
  getVehicleVariantById(id: ID!): VehicleVariant
  getAllVehicleVariantsByModel(
    vehicleModelId: ID!
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor
    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor
    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt
    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt
    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int
    "Return results sorted in this order"
    sortOrder: SortOrder = asc
    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: AccountSortByField = timeSent
  ): vehicleVariantConnection
}
